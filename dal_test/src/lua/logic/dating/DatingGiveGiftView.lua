---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/7/23 0023 18:17
---
local giftTable = TabDataMgr:getData("Item")
local DatingGiveGiftView = class("DatingGiveGiftView",BaseLayer)

function DatingGiveGiftView:initData(roleshape,closeCallBack)
    self.closeCallBack_ = closeCallBack
    self.roleId = RoleDataMgr:getCurId()
    self.likeGoods = RoleDataMgr:getLikeGood()
    self.curFavorLevel = RoleDataMgr:getFavorLevel(self.roleId)
    print("DatingGiveGiftView:initData self.roleId ",self.roleId)
    self.lastRoleshape = roleshape
    self.lastRoleshape:sleep()
    if cityController then
        cityController:hideRoomShape(self.lastRoleshape.bid, self.lastRoleshape.mid)
    end

    self.isShowGiftView = false
    roleshape:hide()
end

function DatingGiveGiftView:ctor(roleshape,closeCallBack)
    self.super.ctor(self)

    self:initData(roleshape,closeCallBack)
    self:init("lua.uiconfig.dating.datingGiveGiftView")
end

function DatingGiveGiftView:initUI(ui)
    self.super.initUI(self,ui)

    self.ui = ui

    RoleDataMgr:sendUpdateMainActivation()

    self.Panel_base = TFDirector:getChildByPath(self.ui, "Panel_base")
    self.Panel_Touch = TFDirector:getChildByPath(self.ui, "Panel_Touch")
    self.Image_gift = TFDirector:getChildByPath(self.ui, "Image_gift"):hide()
    self.Panel_info = TFDirector:getChildByPath(self.ui, "Panel_info")
    self.Panel_buttonList = TFDirector:getChildByPath(self.ui, "Panel_buttonList"):show()
    self.Image_times = TFDirector:getChildByPath(self.ui, "Image_times"):show()
    self.Image_times.savePos = self.Image_times:Pos()
    self.Panel_giftInfo = TFDirector:getChildByPath(self.ui, "Panel_giftInfo")
    self.Panel_tip = TFDirector:getChildByPath(self.ui,"Panel_tip"):hide()

    self.roleshape = requireNew("lua.logic.newCity.CityShape"):new({path=self.lastRoleshape.resPath, isflip=self.lastRoleshape.isFlip, word =self.lastRoleshape.aiword}):setRoomScale()
    self.roleshape.shapeAnim:setupPoseWhenPlay(false)
    local pos = self.lastRoleshape:getNodePos(self.Panel_base)
    self.location = pos.x < GameConfig.WS.width/2 and 0 or 1
    self.roleshape:setShapeBornPos(pos, self.lastRoleshape.bid)
    self.roleshape.state = self.lastRoleshape.state
    self.roleshape:setClickEnabled(false)
    self.roleshape:setDirect(self.lastRoleshape.shapeDir)
    self.roleshape:showClickTalk()
    local lastcur = self.lastRoleshape.curAnim
    if lastcur == "move" or lastcur == "special1" or
            lastcur == "special2" or lastcur == "special3" or
            lastcur == "angry" or lastcur == "boring" or
            lastcur == "hungry" then
        self.roleshape:playAnim("idle", -1)
    else
        self.roleshape:playAnim(lastcur, -1)
    end
    self.roleshape.defaultAnim = self.roleshape.curAnim
    self.Panel_base:addChild(self.roleshape,100)

    self:initBtns()
    self:initPrefab()
    self:initFoodListView()
    self:initGiftsListView()
    self:initOther()
    self:updateFavorInfo()
    self:updateMoodInfo()
    self:updateButtonList()
    self:updateGift()
    self:updatePanelInfo()
    self:updateLikeBottom()

    --self:showFoodsGridView()
end

function DatingGiveGiftView:inInfoAction()
    if self.isShowGiftView then
        do return end
    end
    if self.location == 0 then
        self.ui:runAnimation("ActionInfoLIn",1)
    elseif self.location == 1 then
        self.ui:runAnimation("ActionInfoRIn",1)
    end
end

function DatingGiveGiftView:outInfoAction()
    if self.location == 0 then
        self.ui:runAnimation("ActionInfoLOut",1)
    elseif self.location == 1 then
        self.ui:runAnimation("ActionInfoROut",1)
    end
end

function DatingGiveGiftView:inButtonListAction()
    if self.location == 0 then
        self.ui:runAnimation("ActionButtonListRIn",1)
    elseif self.location == 1 then
        self.ui:runAnimation("ActionButtonListLIn",1)
    end
end

function DatingGiveGiftView:outButtonListAction()
    if self.location == 0 then
        self.ui:runAnimation("ActionButtonListROut",1)
    elseif self.location == 1 then
        self.ui:runAnimation("ActionButtonListLOut",1)
    end
end

function DatingGiveGiftView:inGiftAction()
    if self.location == 0 then
        self.ui:runAnimation("ActionGiftRIn",1)
    elseif self.location == 1 then
        self.ui:runAnimation("ActionGiftLIn",1)
    end
end

function DatingGiveGiftView:outGiftAction()
    if self.location == 0 then
        self.ui:runAnimation("ActionGiftROut",1)
    elseif self.location == 1 then
        self.ui:runAnimation("ActionGiftLOut",1)
    end
end

function DatingGiveGiftView:updateButtonList()
    local Panel_buttonL = TFDirector:getChildByPath(self.ui, "Panel_buttonL")
    local Panel_buttonR = TFDirector:getChildByPath(self.ui, "Panel_buttonR")

    if self.location == 0 then
        self.Panel_buttonList:Pos(Panel_buttonR:Pos())
    elseif self.location == 1 then
        self.Panel_buttonList:Pos(Panel_buttonL:Pos())
    end

    local buildData_ = RoleDataMgr:getDayBuildList(self.roleId)
    local mainLiveList = RoleDataMgr:getMainList(self.roleId)
    self.Button_letter:setVisible(#mainLiveList > 0)
    self.Button_datingEnter:setVisible(#buildData_ > 0)

    self.Panel_buttonList.savePos = self.Panel_buttonList:Pos()
end

function DatingGiveGiftView:updateGift()
    local Image_giftR = TFDirector:getChildByPath(self.ui, "Image_giftR")
    local Image_giftL = TFDirector:getChildByPath(self.ui, "Image_giftL")

    if self.location == 0 then
        self.Image_gift:Pos(Image_giftR:Pos())
    elseif self.location == 1 then
        self.Image_gift:Pos(Image_giftL:Pos())
    end

    self.Image_gift.savePos = self.Image_gift:Pos()
end

function DatingGiveGiftView:updatePanelInfo()
    local Panel_infoR = TFDirector:getChildByPath(self.ui, "Panel_infoR")
    local Panel_infoL = TFDirector:getChildByPath(self.ui, "Panel_infoL")

    if self.location == 0 then
        self.Panel_info:Pos(Panel_infoL:Pos())
    elseif self.location == 1 then
        self.Panel_info:Pos(Panel_infoR:Pos())
    end

    self.Panel_info.savePos = self.Panel_info:Pos()
end

function DatingGiveGiftView:initOther()
    local Label_times = TFDirector:getChildByPath(self.ui, "Label_times")
    Label_times:setText(DatingDataMgr:getDayDatingTimes())
    local Label_maxTimes = TFDirector:getChildByPath(self.ui, "Label_maxTimes")
    Label_maxTimes:setText("/"..DatingDataMgr:getDayDatingMaxTimes())
end

function DatingGiveGiftView:updateLikeBottom()
    local Image_likeBottom = TFDirector:getChildByPath(self.ui, "Image_likeBottom")
    local Panel_icon1 = TFDirector:getChildByPath(Image_likeBottom, "Panel_icon1")
    Panel_icon1.Image_iconUnlock = TFDirector:getChildByPath(Panel_icon1, "Image_iconUnlock"):hide()
    Panel_icon1.Image_iconLock = TFDirector:getChildByPath(Panel_icon1, "Image_iconLock"):hide()
    Panel_icon1.Label_iconName = TFDirector:getChildByPath(Panel_icon1, "Label_iconName")

    if not self.likeGift then
        self.likeGift = RoleDataMgr:getuLikeGift()
    end

    if self.likeGift then
        Panel_icon1.Image_iconUnlock:show()
        local iconStr = RoleDataMgr:getRoleInfo(self.roleId).giftType
        Panel_icon1.Image_iconUnlock:getChildByName("Image_item"):setTexture(iconStr)
        local text = TextDataMgr:getText(GoodsDataMgr:getItemCfg(self.likeGift).nameTextId);
        local pos = string.find(text,"%[");
        if pos and pos > 0 then
            text = string.sub(text,1,pos - 1)
        end
        Panel_icon1.Label_iconName:setString(text)
    else
        Panel_icon1.Image_iconLock:show()
        Panel_icon1.Label_iconName:setText("？？？？")
    end
    local Panel_icon2 = TFDirector:getChildByPath(Image_likeBottom, "Panel_icon2")
    Panel_icon2.Image_iconUnlock = TFDirector:getChildByPath(Panel_icon2, "Image_iconUnlock"):hide()
    Panel_icon2.Image_iconLock = TFDirector:getChildByPath(Panel_icon2, "Image_iconLock"):hide()
    Panel_icon2.Label_iconName = TFDirector:getChildByPath(Panel_icon2, "Label_iconName")

    if not self.likeFood then
        self.likeFood = RoleDataMgr:getuLikeGood()
    end

    if self.likeFood then
        Panel_icon2.Image_iconUnlock:show()
        local iconStr = RoleDataMgr:getRoleInfo(self.roleId).foodType
        Panel_icon2.Image_iconUnlock:getChildByName("Image_item"):setTexture(iconStr)
        local text = TextDataMgr:getText(GoodsDataMgr:getItemCfg(self.likeFood).nameTextId);
        local pos = string.find(text,"%[");
        if pos and pos > 0 then
            text = string.sub(text,1,pos - 1)
        end
        Panel_icon2.Label_iconName:setString(text)
    else
        Panel_icon2.Image_iconLock:show()
        Panel_icon2.Label_iconName:setText("？？？？")
    end
end

function DatingGiveGiftView:updateFavorInfo()
    self.curFavor = RoleDataMgr:getFavor(self.roleId)
    if RoleDataMgr:getFavorLevel(self.roleId) >  self.curFavorLevel then

        if self.voiceHandle then
            TFAudio.stopEffect(self.voiceHandle)
            self.voiceHandle = nil
        end

        local data = {}
        data.lastLevel = self.curFavorLevel
        data.newLevel = RoleDataMgr:getFavorLevel(self.roleId)
        local favorUpgradeLayer = require("lua.logic.dating.FavorUpgradeLayer"):new(data)
        AlertManager:addLayer(favorUpgradeLayer,AlertManager.BLOCK,AlertManager.TWEEN_NONE)
        AlertManager:show()

        self.isShowFavorUp = true
    end
    self.curFavorLevel = RoleDataMgr:getFavorLevel(self.roleId)
    self.Panel_favor = TFDirector:getChildByPath(self.ui, "Panel_favor")
    local LoadingBar_favorPro = TFDirector:getChildByPath(self.Panel_favor, "LoadingBar_favorPro")
    LoadingBar_favorPro:setPercent(RoleDataMgr:getFavorPercent(self.roleId))
    local Label_favorValue = TFDirector:getChildByPath(self.Panel_favor, "Label_favorValue")
    Label_favorValue:setString(self.curFavor .. "/" .. RoleDataMgr:getLvMaxFavor(self.roleId,self.curFavorLevel))
end

function DatingGiveGiftView:updateMoodInfo()
    self.curMood = RoleDataMgr:getMood(self.roleId)
    self.Panel_mood = TFDirector:getChildByPath(self.ui, "Panel_mood")
    local LoadingBar_moodPro = TFDirector:getChildByPath(self.Panel_mood, "LoadingBar_moodPro")
    LoadingBar_moodPro:setPercent(self.curMood)
    local Label_moodValue = TFDirector:getChildByPath(self.Panel_mood, "Label_moodValue")
    Label_moodValue:setText(self.curMood .. "/" .. 100)
end

function DatingGiveGiftView:initFoodListView()
    local ScrollView_food = TFDirector:getChildByPath(self.ui, "ScrollView_food")

    self.foodGridView = UIGridView:create(ScrollView_food)
    local item = self.Panel_Item:clone()
    self.foodGridView:setItemModel(item)
    self.foodGridView:setColumn(3)
    self.foodGridView:setColumnMargin(5)
    self.foodGridView:setRowMargin(10)

    --self:loadFoodsListView()
end

function DatingGiveGiftView:loadFoodsListView()
    self.goods = RoleDataMgr:getAllFoodInfoList(self.roleId)
    self.foodGridView:removeAllItems()

    for i,v in ipairs(self.goods) do
        local item = self.Panel_Item:clone()
        item.id = v.id
        self:initItem(item)
        self:updateItem(item)
        self.foodGridView:pushBackCustomItem(item)

        dump({self.likeGoods,v.id})
        if table.find(self.likeGoods,v.id) ~= -1 then
            dump("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL")
            self.likeFood = v.id
        end
    end

    for i, v in ipairs(self.foodGridView:getItems()) do
        local Panel_touch = TFDirector:getChildByPath(v,"Panel_touch")
        Panel_touch:onClick(function()
            self:select(self.foodGridView,v)
        end)
    end

end

function DatingGiveGiftView:initGiftsListView()
    local ScrollView_gift = TFDirector:getChildByPath(self.ui, "ScrollView_gift")

    self.giftGridView = UIGridView:create(ScrollView_gift)
    local item = self.Panel_Item:clone()
    self.giftGridView:setItemModel(item)
    self.giftGridView:setColumn(3)
    self.giftGridView:setColumnMargin(5)
    self.giftGridView:setRowMargin(10)

    --self:loadGiftsListView()
end

function DatingGiveGiftView:loadGiftsListView()
    self.giftGridView:removeAllItems()
    self.gifts = RoleDataMgr:getAllGiftInfoList(self.roleId)
    for i,v in ipairs(self.gifts) do
        local item = self.Panel_Item:clone()
        item.id = v.id
        self:initItem(item)
        self:updateItem(item)
        self.giftGridView:pushBackCustomItem(item)

        if table.find(self.likeGoods,v.id) ~= -1 then
            self.likeGift = v.id
        end
    end

    for i, v in ipairs(self.giftGridView:getItems()) do
        local Panel_touch = TFDirector:getChildByPath(v,"Panel_touch")
        Panel_touch:onClick(function()
            self:select(self.giftGridView,v)
        end)
    end
end

function DatingGiveGiftView:initItem(item)

    item.select = TFDirector:getChildByPath(item, "Image_select")

    local icon = TFDirector:getChildByPath(item,"Image_item")
    icon.saveScale = icon:Scale()
    icon.savePos = icon:Pos()
    icon.logic = item
    item.icon = icon

    local labelNum = TFDirector:getChildByPath(item,"Label_num")
    item.labelNum = labelNum

    item.Image_like = TFDirector:getChildByPath(item, "Image_like"):hide()

    local idx = 0
    while true do
        idx = idx + 1
        local star = TFDirector:getChildByPath(item,"Image_star_"..idx)
        if star then
            item.starList = item.starList or {}
            table.insert(item.starList,star)
        else
            break
        end
    end
end

function DatingGiveGiftView:updateItem(item)
    local id = item.id
    local data = giftTable[id]
    if not data then
        Box("数据为空，id: ".. id)
        return
    end

    local isBJLike = false
    if table.find(self.likeGoods,id) ~= -1 then
        isBJLike = true
    end

    item.type = data.subType
    --品质
    item.grade = data.quality

    item.icon:setTexture(data.icon)
    item.num = GoodsDataMgr:getItemCount(id)
    item.labelNum:setText(item.num)

    local itemCfg = GoodsDataMgr:getItemCfg(id)
    for i, v in ipairs(item.starList) do
        local visible = i <= itemCfg.star
        v:setVisible(visible)
    end

    if isBJLike then
        item.Image_like:show()
    end

end

function DatingGiveGiftView:showFoodsGridView()
    local Image_select = TFDirector:getChildByPath(self.Button_food,"Image_select")
    if Image_select:isVisible() then
        dump("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy");
        self:select(self.foodGridView,self.foodGridView:getItems()[1])
        return
    else
        dump("xxxxxxxxxxxxxxxxxxxxxxxxx");
        Image_select:show()
        self.Button_gift:getChildByName("Image_select"):hide()
        self.foodGridView:setVisible(true)
        self.giftGridView:setVisible(false)

        self.foodGridView.isVisible = true
        self.giftGridView.isVisible = false
        self:select(self.foodGridView,self.foodGridView:getItems()[1])
    end

    self.Panel_giftInfo:setVisible(#self.goods ~= 0)
    self.Panel_tip:setVisible(not self.Panel_giftInfo:isVisible())
end

function DatingGiveGiftView:showGiftsGridView()
    local Image_select = TFDirector:getChildByPath(self.Button_gift,"Image_select")
    if Image_select:isVisible() then
        self:select(self.giftGridView,self.giftGridView:getItems()[1])
        return
    else
        Image_select:show()
        self.Button_food:getChildByName("Image_select"):hide()
        self.foodGridView:setVisible(false)
        self.giftGridView:setVisible(true)

        self.giftGridView.isVisible = true
        self.foodGridView.isVisible = false
        self:select(self.giftGridView,self.giftGridView:getItems()[1])
    end

    self.Panel_giftInfo:setVisible(#self.gifts ~= 0)
    self.Panel_tip:setVisible(not self.Panel_giftInfo:isVisible())
end

function DatingGiveGiftView:initBtns()
    self.Button_letter = TFDirector:getChildByPath(self.ui, "Button_letter")
    self.Button_letter.Image_hongdian = TFDirector:getChildByPath(self.Button_letter, "Image_hongdian")
    self.Button_giveGift = TFDirector:getChildByPath(self.ui, "Button_giveGift")
    self.Button_datingEnter = TFDirector:getChildByPath(self.ui, "Button_datingEnter")
    self.Button_pokedex = TFDirector:getChildByPath(self.ui, "Button_pokedex")
    self.Button_datingEnter.Image_tip = TFDirector:getChildByPath(self.Button_datingEnter, "Image_tip")
    self.Button_datingEnter.Image_hongdian = TFDirector:getChildByPath(self.Button_datingEnter, "Image_hongdian")
    self.Button_datingEnter.Label_title1 = TFDirector:getChildByPath(self.Button_datingEnter, "Label_title1")
    self.Button_datingEnter.Label_title2 = TFDirector:getChildByPath(self.Button_datingEnter, "Label_title2")

    self.Button_letter.Image_hongdian:setVisible(RoleDataMgr:checkMainRewardState(self.roleId))

    local state = RoleDataMgr:getDayDatingState()
    self.Button_datingEnter.Image_tip:setVisible(state == EC_DatingScriptState.NO_FINISH)
    self.Button_datingEnter.Label_title1:setVisible(state ~= EC_DatingScriptState.NO_FINISH)
    self.Button_datingEnter.Label_title2:setVisible(state == EC_DatingScriptState.NO_FINISH)
    self.Button_datingEnter.Image_hongdian:setVisible(RoleDataMgr:checkDayRewardState(self.roleId))


    self.Button_food = TFDirector:getChildByPath(self.ui, "Button_food")
    self.Button_gift = TFDirector:getChildByPath(self.ui, "Button_gift")

    self.Button_gift:getChildByName("Image_select"):hide()
    self.Button_food:getChildByName("Image_select"):hide()

    self.Button_give = TFDirector:getChildByPath(self.ui, "Button_give")
end

function DatingGiveGiftView:initPrefab()
    self.Panel_prefab = TFDirector:getChildByPath(self.ui,"Panel_prefab")
    self.Panel_Item = TFDirector:getChildByPath(self.Panel_prefab,"Panel_Item")
end

function DatingGiveGiftView:updateInfo(id)
    local data = giftTable[id]
    if not data then
        Box("数据为空，id: "..id)
        return
    end

    local Panel_giftInfo = TFDirector:getChildByPath(self.ui, "Panel_giftInfo")
    local Label_name = TFDirector:getChildByPath(Panel_giftInfo, "Label_name")
    local Label_moodValue = TFDirector:getChildByPath(Panel_giftInfo, "Label_moodValue")
    local Label_favorValue = TFDirector:getChildByPath(Panel_giftInfo, "Label_favorValue")

    local name = TextDataMgr:getText(data.nameTextId)
    Label_name:setString(name)

    local favorValue = 0
    local moodValue = 0
    if data.useProfit.fix then
        favorValue = data.useProfit.fix.items[1].num
        moodValue = data.useProfit.fix.items[2].num
    end

    Label_moodValue:setString("+".. moodValue)
    Label_favorValue:setString("+".. favorValue)

end

function DatingGiveGiftView:select(view,item)
    if #view:getItems() == 0 then
        return
    end
    for ib, vb in ipairs(view:getItems()) do
        vb.select:hide()
    end
    item.select:show()
    self.selectItem = item
    self:updateInfo(item.id)
end


function DatingGiveGiftView:showDatingLetterView()
    --Utils:openView("dating.DatingLetterView")
end

function DatingGiveGiftView:showPokedexView()
    Utils:openView("dating.DatingPokedexSpriteView")
end

function DatingGiveGiftView:showDatingGiveGiftView()

    self.likeGoods = RoleDataMgr:getLikeGood()
    self.likeFood = nil
    self.likeGift = nil
    self.selectItem = nil
    self:loadGiftsListView()
    self:loadFoodsListView()
    self:showFoodsGridView()
    self:updateLikeBottom()

    if  RoleDataMgr:getVoiceHandle() then
        TFAudio.stopEffect(RoleDataMgr:getVoiceHandle())
        RoleDataMgr:setVoiceHandle()
    end

    self.voiceHandle = VoiceDataMgr:playVoice("button_gift",RoleDataMgr:getCurId())
    self:playGiftWaitVoice()
    --self.Image_gift:setVisible(not self.Image_gift:isVisible())
    --self.Panel_buttonList:hide()
    --self.Image_times:hide()

    self:outButtonListAction()
    self:timeOut(function()
        self.Image_gift:show()
        self:inGiftAction()
    end,0.5)

    self.isShowGiftView = true
end

function DatingGiveGiftView:playGiftWaitVoice()
    if self.giftWaitVoice then
        TFAudio.stopEffect(self.giftWaitVoice)
    end
    self.ui:stopAllActions()
    local seq = Sequence:create({
        DelayTime:create(16),
        CallFunc:create(function()
            self.giftWaitVoice = VoiceDataMgr:playVoice("gifts_wait",RoleDataMgr:getCurId())
        end)
    })
    local action = RepeatForever:create(seq)
    self.ui:runAction(action)
end

function DatingGiveGiftView:showDatingDayView()

    local state = RoleDataMgr:getDayDatingState()
    if state == EC_DatingScriptState.NO_FINISH then
        DatingDataMgr:showDatingLayer(EC_DatingScriptType.DAY_SCRIPT,nil,true)
        return
    end

    self.Panel_buttonList:hide()
    self.Image_times:hide()
    self.Panel_info:hide()
    Utils:openView("dating.NewDatingDayView")
    self.isShowDayView = true
end

function DatingGiveGiftView:onShow()
    self.super.onShow(self)

    if self.isShowDayView then
        self.Panel_buttonList:show()
        self.Image_times:show()
        self.Panel_info:show()
        self.isShowDayView = nil
    end

    local Label_times = TFDirector:getChildByPath(self.ui, "Label_times")
    Label_times:setText(DatingDataMgr:getDayDatingTimes())

    self:inInfoAction()

    self.isShowFavorUp = nil
end

function DatingGiveGiftView:onClose()
    self.super.onClose(self)


    if self.voiceHandle then
        TFAudio.stopEffect(self.voiceHandle)
    end

    if self.giftWaitVoice then
        TFAudio.stopEffect(self.giftWaitVoice)
    end

    EventMgr:dispatchEvent(EV_ELVES_EVENT.closeUI)

    if not tolua.isnull(self.lastRoleshape) then
        self.lastRoleshape:show()
        self.lastRoleshape:awake()
        if cityController then
            cityController:showRoomShape(self.lastRoleshape.bid, self.lastRoleshape.mid)
        end
    end
end

function DatingGiveGiftView:onGetMainListHandle()
    self:showDatingLetterView()
end

function DatingGiveGiftView:onDonateHandel()
    self.likeGoods = RoleDataMgr:getLikeGood()
    print("onDonateHandel self.likeGoods ",self.likeGoods)
    if GoodsDataMgr:getItemCount(self.selectItem.id) == 0 then
        self:loadGiftsListView()
        self:loadFoodsListView()
        if self.foodGridView.isVisible then
            self:select(self.foodGridView,self.foodGridView:getItems()[1])
        end
        if self.giftGridView.isVisible then
            self:select(self.giftGridView,self.giftGridView:getItems()[1])
        end
    else
        for i,item in ipairs(self.foodGridView:getItems()) do
            self:updateItem(item)
        end
        for i,item in ipairs(self.giftGridView:getItems()) do
            self:updateItem(item)
        end
    end

    if self.voiceHandle then
        TFAudio.stopEffect(self.voiceHandle)
    end

    if self.foodGridView.isVisible then
        self.Panel_giftInfo:setVisible(#self.goods ~= 0)
        if table.find(self.likeGoods,self.selectItem.id) ~= -1 then
            self.likeFood = self.selectItem.id
            self:playRoleAnim("surprise")
            self.voiceHandle = VoiceDataMgr:playVoice("food_low",RoleDataMgr:getCurId())
        else
            self:playRoleAnim("happy")
            self.voiceHandle = VoiceDataMgr:playVoice("food_high",RoleDataMgr:getCurId())
        end
    end

    if self.giftGridView.isVisible then
        self.Panel_giftInfo:setVisible(#self.gifts ~= 0)
        if table.find(self.likeGoods,self.selectItem.id) ~= -1 then
            self.likeGift = self.selectItem.id
            self:playRoleAnim("surprise")
            self.voiceHandle = VoiceDataMgr:playVoice("gift_low",RoleDataMgr:getCurId())
        else
            self:playRoleAnim("happy")
            self.voiceHandle = VoiceDataMgr:playVoice("gift_high",RoleDataMgr:getCurId())
        end
    end

    self.Panel_tip:setVisible(not self.Panel_giftInfo:isVisible())

    self:updateLikeBottom()

    if self.isShowFavorUp then
        if self.voiceHandle then
            TFAudio.stopEffect(self.voiceHandle)
            self.voiceHandle = nil
        end
    end
end

function DatingGiveGiftView:onRefreshRoleInfoHandel()
    self:updateFavorInfo()
    self:updateMoodInfo()
end

function DatingGiveGiftView:playRoleAnim(anim)
    self.roleshape.shapeAnim:addMEListener(TFARMATURE_COMPLETE,function(skeletonNode)
        self.roleshape:playAnim(self.roleshape.defaultAnim)
        self.roleshape.shapeAnim:removeMEListener(TFARMATURE_COMPLETE)
    end)
    self.roleshape:playAnim(anim,0)
end

function DatingGiveGiftView:registerEvents()

    EventMgr:addEventListener(self,EV_DATING_EVENT.getMainList, handler(self.onGetMainListHandle, self))
    EventMgr:addEventListener(self, EV_DATING_EVENT.refreshFavorLevel, handler(self.onRefreshFavorLevel, self))
    EventMgr:addEventListener(self, EV_DATING_EVENT.refreshRole, handler(self.onRefreshRoleInfoHandel, self))
    EventMgr:addEventListener(self, EV_DATING_EVENT.refreshRoleDonate, handler(self.onDonateHandel, self))
    EventMgr:addEventListener(self,EV_DATING_EVENT.getMainReward, handler(self.onGetRewardHandle, self))
    EventMgr:addEventListener(self, EV_TASK_RECEIVE, handler(self.onGetRewardHandle, self))
    EventMgr:addEventListener(self, EV_DATING_EVENT.refreshRole, handler(self.onGetRewardHandle, self))

    self.Button_letter:onClick(function()
        RoleDataMgr:sendGetMainMsg(self.roleId)
        --self:showDatingLetterView() --测试用
    end)

    self.Button_giveGift:onClick(function()
        self:showDatingGiveGiftView()
    end)

    self.Button_datingEnter:onClick(function()
        self:showDatingDayView()
    end)


    self.Button_food:onClick(function()
        self:showFoodsGridView()
    end)

    self.Button_gift:onClick(function()
        self:showGiftsGridView()
    end)

    self.Button_pokedex:onClick(function()
        --self:showPokedexView()
        FunctionDataMgr:jPokedex()
    end)

    self.Button_give:onClick(function()
        if self.selectItem then
            local cur = RoleDataMgr:getFavor(self.roleId)
            local max = RoleDataMgr:getFavorMaxValue(self.roleId)--RoleDataMgr:getLvMaxFavor(self.roleId,self.curFavorLevel)

            local mood = RoleDataMgr:getMood(self.roleId)
            local moodMax = RoleDataMgr:getCurLvMaxMood(self.roleId)

            local state = RoleDataMgr:getElvesShowState(self.roleId)
            -- 饥饿状态送礼不受心情值和好感度是否满值影响
            if state ~= EC_ElvesState.hunger then
                if cur >= max and mood >= moodMax then
                    Utils:showTips(800134)
                    return
                end
    
                if cur >= max then
                    Utils:showTips(304008)
                    --return
                end
            end

            RoleDataMgr:sendDonate(RoleDataMgr:getRoleInfo(self.roleId).sid,self.selectItem.id,1)
            self:playGiftWaitVoice()
        end
    end)

    self.Panel_Touch:onClick(function()
        if self.isShowGiftView then
            self:outGiftAction()
            self:timeOut(function()
                self.Image_gift:hide()
                self:inButtonListAction()
            end,0.5)
            self.isShowGiftView = false
        else
            AlertManager:close()
        end
    end)
end

function DatingGiveGiftView:onGetRewardHandle()
    if self.Button_datingEnter.Image_hongdian then
        self.Button_letter.Image_hongdian:setVisible(RoleDataMgr:checkMainRewardState(self.roleId))
    end
    if self.Button_datingEnter.Image_hongdian then
        self.Button_datingEnter.Image_hongdian:setVisible(RoleDataMgr:checkDayRewardState(self.roleId))
    end
end


return DatingGiveGiftView